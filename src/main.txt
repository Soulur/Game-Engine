#include "Renderer/Camera.h"
#include "Renderer/Shader.h"
#include "Renderer/VertexArray.h"
#include "Renderer/Buffer.h"
#include "Renderer/Texture.h"
#include "Renderer/Model.h"
#include "Renderer/Framebuffer.h"

#include "Core/Log.h"

#include <iostream>

#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <stb_image.h>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

// settings
const unsigned int SCR_WIDTH = 1280;
const unsigned int SCR_HEIGHT = 720;

// timing
float deltaTime = 0.0f; // time between current frame and last frame
float lastFrame = 0.0f;

void mouse_callback(GLFWwindow *window, double xposIn, double yposIn)
{
    auto& camera = Mc::Camera::Get();
    auto spec = camera.GetProps();

    float xpos = static_cast<float>(xposIn);
    float ypos = static_cast<float>(yposIn);

    if (camera.GetFirstMouse())
    {
        spec.Last.x = xpos;
        spec.Last.y = ypos;
        camera.SetFirstMouse(false);
    }

    float xoffset = xpos - spec.Last.x;
    float yoffset = spec.Last.y - ypos; // reversed since y-coordinates go from bottom to top
    spec.Last.x = xpos;
    spec.Last.y = ypos;

    float sensitivity = 0.01f; // change this value to your liking
    xoffset *= sensitivity;
    yoffset *= sensitivity;

    spec.Yaw += xoffset;
    spec.Pitch += yoffset;

    // make sure that when pitch is out of bounds, screen doesn't get flipped
    if (spec.Pitch > 89.0f)
        spec.Pitch = 89.0f;
    if (spec.Pitch < -89.0f)
        spec.Pitch = -89.0f;

    glm::vec3 front;
    front.x = cos(glm::radians(spec.Yaw)) * cos(glm::radians(spec.Pitch));
    front.y = sin(glm::radians(spec.Pitch));
    front.z = sin(glm::radians(spec.Yaw)) * cos(glm::radians(spec.Pitch));
    spec.cameraFront = glm::normalize(front);

    camera.SetProps(spec);
}

int main()
{
    // glfw: initialize and configure
    // ------------------------------
    glfwInit();

    // glfw window creation
    // --------------------
    // glfwWindowHint(GLFW_SAMPLES, 4);

    GLFWwindow *window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "LearnOpenGL", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetCursorPosCallback(window, mouse_callback);

    // tell GLFW to capture our mouse
    glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

    // glad: load all OpenGL function pointers
    // ---------------------------------------
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    // configure global opengl state
    // -----------------------------
    // 深度测试
    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);

    // 模板测试
    // glEnable(GL_STENCIL_TEST);
    // glStencilFunc(GL_NOTEQUAL, 1, 0xFF);
    // glStencilOp(GL_KEEP, GL_KEEP, GL_REPLACE);

    // 混合
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    // 面剔除
    // glEnable(GL_CULL_FACE);
    // glCullFace(GL_BACK);
    // glCullFace(GL_CCW);

    // 启动多重采样 (默认是启动的)
    glEnable(GL_MULTISAMPLE);

    // set up vertex data (and buffer(s)) and configure vertex attributes
    // ------------------------------------------------------------------
    using namespace Mc;

    Log::Init();
    Scope<Camera> camera = Camera::Create(-90.0f, 0.0f, 1280.0f, 720.0f, 45.0f, 0.1f, 1000.0f);

    // ====================================================================================================

    // VertexBuffer

    // 定义索引数组
    unsigned int indices[] = {
        // Back face (反向)
        2, 1, 0, 0, 3, 2,
        // Front face (反向)
        6, 5, 4, 4, 7, 6,
        // Left face (反向)
        10, 9, 8, 8, 11, 10,
        // Right face (反向)
        14, 13, 12, 12, 15, 14,
        // Bottom face (反向)
        18, 17, 16, 16, 19, 18,
        // Top face (反向)
        22, 21, 20, 20, 23, 22
    };

    unsigned int forward_indices[] = {
        // Back face
        0, 1, 2, 2, 3, 0,
        // Front face
        4, 5, 6, 6, 7, 4,
        // Left face
        8, 9, 10, 10, 11, 8,
        // Right face
        12, 13, 14, 14, 15, 12,
        // Bottom face
        16, 17, 18, 18, 19, 16,
        // Top face
        20, 21, 22, 22, 23, 20
    };

    // Core log macros
    LOG_CORE_TRACE("Test: LOG_CORE_TRACE");
    LOG_CORE_INFO("Test: LOG_CORE_INFO");
    LOG_CORE_WARN("Test: LOG_CORE_WARN");
    LOG_CORE_ERROR("Test: LOG_CORE_ERROR");
    LOG_CORE_CRITICAL("Test: LOG_CORE_CRITICAL");

    // Client log macros
    LOG_TRACE("Test: LOG_TRACE");
    LOG_INFO("Test: LOG_INFO");
    LOG_WARN("Test: LOG_WARN");
    LOG_ERROR("Test: LOG_ERROR");
    LOG_CRITICAL("Test: LOG_CRITICAL");

    // render loop
    // -----------
    while (!glfwWindowShouldClose(window))
    {
        // per-frame time logic
        // --------------------
        float currentFrame = static_cast<float>(glfwGetTime());
        deltaTime = currentFrame - lastFrame;
        lastFrame = currentFrame;

        // input
        // -----
        camera->Update(window, deltaTime);
        
        glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);

        // bind textures on corresponding texture units

        // render the loaded model

        // ==============================================================================
        // bind to framebuffer and draw scene as we normally would to color texture


        // ==============================================================================

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}